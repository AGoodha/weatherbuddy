import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import joblib
from sklearn.utils import class_weight
from tensorflow.keras.callbacks import TensorBoard
import datetime

# Load the dataset
df = pd.read_csv('/Users/artleyg/Downloads/soil data used in 4_24 training - Sheet1.csv')

# Define features and label columns
feature_columns = ['Maximum Temp', 'Minimum Temp', 'Average Temp', 'Departure', 'HDD', 'CDD', 'Precipitation', 'New Snow', 'Snow Depth']
label_column = 'Ridden'

# Select only the relevant features
features = df[feature_columns]
labels = df[label_column]

# Convert all feature columns to numeric, handling non-numeric entries
features = features.apply(pd.to_numeric, errors='coerce')

# Handle missing values for numeric columns
features = features.fillna(features.median())

# Assuming 'Ridden' is binary, check if it needs encoding or casting to int
labels = labels.fillna(0)  # Assuming missing values mean 'not ridden'
labels = labels.astype(int)  # Ensure labels are integers

# Normalize features
scaler = MinMaxScaler()
features = scaler.fit_transform(features)
joblib.dump(scaler, 'scaler.save')

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(features, labels, test_size=0.2, random_state=42)

# Calculate class weights
class_weights = class_weight.compute_class_weight(
    'balanced',
    classes=np.unique(y_train),
    y=y_train
)
class_weights_dict = dict(enumerate(class_weights))

# Define the model architecture
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Set up TensorBoard logging
log_dir = "logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = TensorBoard(log_dir=log_dir, histogram_freq=1)

# Train the model with class weights
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_data=(X_test, y_test),
    class_weight=class_weights_dict,
    callbacks=[tensorboard_callback]  # Add TensorBoard callback
)

# Save the model
model.save('trail_ridability_model.h5')
